# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui/gui.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(506, 637)
        MainWindow.setIconSize(QtCore.QSize(16, 16))
        MainWindow.setAnimated(True)
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)
        self.verticalLayout.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout.setSpacing(3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralWidget)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.page)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.tabWidget = QtWidgets.QTabWidget(self.page)
        self.tabWidget.setToolTipDuration(-2)
        self.tabWidget.setObjectName("tabWidget")
        self.tabEncrypt = QtWidgets.QWidget()
        self.tabEncrypt.setObjectName("tabEncrypt")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tabEncrypt)
        self.verticalLayout_5.setContentsMargins(6, 6, 6, 6)
        self.verticalLayout_5.setSpacing(6)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.grpInputFilesEnc = QtWidgets.QGroupBox(self.tabEncrypt)
        self.grpInputFilesEnc.setObjectName("grpInputFilesEnc")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.grpInputFilesEnc)
        self.verticalLayout_2.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.lsInputFilesEnc = QtWidgets.QListWidget(self.grpInputFilesEnc)
        self.lsInputFilesEnc.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.lsInputFilesEnc.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.lsInputFilesEnc.setObjectName("lsInputFilesEnc")
        self.verticalLayout_2.addWidget(self.lsInputFilesEnc)
        self._12 = QtWidgets.QVBoxLayout()
        self._12.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self._12.setContentsMargins(0, 0, 0, 0)
        self._12.setSpacing(6)
        self._12.setObjectName("_12")
        self._2 = QtWidgets.QHBoxLayout()
        self._2.setSpacing(6)
        self._2.setObjectName("_2")
        self.btnAddInputFilesEnc = QtWidgets.QPushButton(self.grpInputFilesEnc)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/plus.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnAddInputFilesEnc.setIcon(icon)
        self.btnAddInputFilesEnc.setCheckable(False)
        self.btnAddInputFilesEnc.setFlat(False)
        self.btnAddInputFilesEnc.setObjectName("btnAddInputFilesEnc")
        self._2.addWidget(self.btnAddInputFilesEnc)
        self.btnRemoveInputFilesEnc = QtWidgets.QPushButton(self.grpInputFilesEnc)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnRemoveInputFilesEnc.setIcon(icon1)
        self.btnRemoveInputFilesEnc.setObjectName("btnRemoveInputFilesEnc")
        self._2.addWidget(self.btnRemoveInputFilesEnc)
        self._12.addLayout(self._2)
        self.verticalLayout_2.addLayout(self._12)
        self.verticalLayout_5.addWidget(self.grpInputFilesEnc)
        self.grpRandom = QtWidgets.QGroupBox(self.tabEncrypt)
        self.grpRandom.setObjectName("grpRandom")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.grpRandom)
        self.verticalLayout_4.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_4.setSpacing(3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self._5 = QtWidgets.QVBoxLayout()
        self._5.setSpacing(6)
        self._5.setObjectName("_5")
        self.rbANU = QtWidgets.QRadioButton(self.grpRandom)
        self.rbANU.setChecked(False)
        self.rbANU.setObjectName("rbANU")
        self._5.addWidget(self.rbANU)
        self.rbCSPRNG = QtWidgets.QRadioButton(self.grpRandom)
        self.rbCSPRNG.setChecked(True)
        self.rbCSPRNG.setObjectName("rbCSPRNG")
        self._5.addWidget(self.rbCSPRNG)
        self.horizontalLayout.addLayout(self._5)
        self.verticalLayout_4.addLayout(self.horizontalLayout)
        self.verticalLayout_5.addWidget(self.grpRandom)
        self.stackEnc = QtWidgets.QStackedWidget(self.tabEncrypt)
        self.stackEnc.setMinimumSize(QtCore.QSize(0, 25))
        self.stackEnc.setMaximumSize(QtCore.QSize(16777215, 25))
        self.stackEnc.setObjectName("stackEnc")
        self.pageEncButton = QtWidgets.QWidget()
        self.pageEncButton.setMinimumSize(QtCore.QSize(0, 25))
        self.pageEncButton.setObjectName("pageEncButton")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.pageEncButton)
        self.verticalLayout_8.setContentsMargins(3, 0, 3, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.btnEncrypt = QtWidgets.QPushButton(self.pageEncButton)
        self.btnEncrypt.setMinimumSize(QtCore.QSize(0, 25))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btnEncrypt.setFont(font)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/lock.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnEncrypt.setIcon(icon2)
        self.btnEncrypt.setObjectName("btnEncrypt")
        self.verticalLayout_8.addWidget(self.btnEncrypt)
        self.stackEnc.addWidget(self.pageEncButton)
        self.pageEncProgress = QtWidgets.QWidget()
        self.pageEncProgress.setObjectName("pageEncProgress")
        self._10 = QtWidgets.QVBoxLayout(self.pageEncProgress)
        self._10.setContentsMargins(6, 0, 6, 11)
        self._10.setSpacing(0)
        self._10.setObjectName("_10")
        self.prgEnc = QtWidgets.QProgressBar(self.pageEncProgress)
        self.prgEnc.setMinimumSize(QtCore.QSize(0, 25))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(115, 210, 22))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(115, 210, 22))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(145, 141, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        self.prgEnc.setPalette(palette)
        self.prgEnc.setProperty("value", 0)
        self.prgEnc.setObjectName("prgEnc")
        self._10.addWidget(self.prgEnc)
        self.stackEnc.addWidget(self.pageEncProgress)
        self.verticalLayout_5.addWidget(self.stackEnc)
        self.grpEncryptionResult = QtWidgets.QGroupBox(self.tabEncrypt)
        self.grpEncryptionResult.setObjectName("grpEncryptionResult")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.grpEncryptionResult)
        self.verticalLayout_3.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.txtEncryptionResult = QtWidgets.QTextEdit(self.grpEncryptionResult)
        self.txtEncryptionResult.setMinimumSize(QtCore.QSize(0, 0))
        self.txtEncryptionResult.setUndoRedoEnabled(False)
        self.txtEncryptionResult.setReadOnly(True)
        self.txtEncryptionResult.setAcceptRichText(True)
        self.txtEncryptionResult.setObjectName("txtEncryptionResult")
        self.verticalLayout_3.addWidget(self.txtEncryptionResult)
        self.verticalLayout_5.addWidget(self.grpEncryptionResult)
        self.tabWidget.addTab(self.tabEncrypt, "")
        self.tabDecrypt = QtWidgets.QWidget()
        self.tabDecrypt.setObjectName("tabDecrypt")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.tabDecrypt)
        self.verticalLayout_6.setContentsMargins(6, 6, 6, 6)
        self.verticalLayout_6.setSpacing(6)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.grpInputFilesDec = QtWidgets.QGroupBox(self.tabDecrypt)
        self.grpInputFilesDec.setObjectName("grpInputFilesDec")
        self._8 = QtWidgets.QVBoxLayout(self.grpInputFilesDec)
        self._8.setContentsMargins(3, 3, 3, 3)
        self._8.setSpacing(3)
        self._8.setObjectName("_8")
        self.lsInputFilesDec = QtWidgets.QListWidget(self.grpInputFilesDec)
        self.lsInputFilesDec.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.lsInputFilesDec.setObjectName("lsInputFilesDec")
        self._8.addWidget(self.lsInputFilesDec)
        self._7 = QtWidgets.QVBoxLayout()
        self._7.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self._7.setContentsMargins(0, 0, 0, 0)
        self._7.setSpacing(6)
        self._7.setObjectName("_7")
        self._3 = QtWidgets.QHBoxLayout()
        self._3.setSpacing(6)
        self._3.setObjectName("_3")
        self.btnAddInputFilesDec = QtWidgets.QPushButton(self.grpInputFilesDec)
        self.btnAddInputFilesDec.setIcon(icon)
        self.btnAddInputFilesDec.setObjectName("btnAddInputFilesDec")
        self._3.addWidget(self.btnAddInputFilesDec)
        self.btnRemoveInputFilesDec = QtWidgets.QPushButton(self.grpInputFilesDec)
        self.btnRemoveInputFilesDec.setIcon(icon1)
        self.btnRemoveInputFilesDec.setObjectName("btnRemoveInputFilesDec")
        self._3.addWidget(self.btnRemoveInputFilesDec)
        self._7.addLayout(self._3)
        self._8.addLayout(self._7)
        self.verticalLayout_6.addWidget(self.grpInputFilesDec)
        self.stackDec = QtWidgets.QStackedWidget(self.tabDecrypt)
        self.stackDec.setMinimumSize(QtCore.QSize(0, 25))
        self.stackDec.setMaximumSize(QtCore.QSize(16777215, 25))
        self.stackDec.setObjectName("stackDec")
        self.pageDecButton = QtWidgets.QWidget()
        self.pageDecButton.setMinimumSize(QtCore.QSize(0, 25))
        self.pageDecButton.setObjectName("pageDecButton")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.pageDecButton)
        self.verticalLayout_9.setContentsMargins(3, 0, 3, 0)
        self.verticalLayout_9.setSpacing(0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.btnDecrypt = QtWidgets.QPushButton(self.pageDecButton)
        self.btnDecrypt.setMinimumSize(QtCore.QSize(0, 25))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btnDecrypt.setFont(font)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/lock_open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btnDecrypt.setIcon(icon3)
        self.btnDecrypt.setObjectName("btnDecrypt")
        self.verticalLayout_9.addWidget(self.btnDecrypt)
        self.stackDec.addWidget(self.pageDecButton)
        self.pageDecProgress = QtWidgets.QWidget()
        self.pageDecProgress.setObjectName("pageDecProgress")
        self._11 = QtWidgets.QVBoxLayout(self.pageDecProgress)
        self._11.setContentsMargins(6, 0, 6, 6)
        self._11.setSpacing(0)
        self._11.setObjectName("_11")
        self.prgDec = QtWidgets.QProgressBar(self.pageDecProgress)
        self.prgDec.setMinimumSize(QtCore.QSize(0, 25))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(115, 210, 22))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(115, 210, 22))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(145, 141, 126))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        self.prgDec.setPalette(palette)
        self.prgDec.setProperty("value", 0)
        self.prgDec.setObjectName("prgDec")
        self._11.addWidget(self.prgDec)
        self.stackDec.addWidget(self.pageDecProgress)
        self.verticalLayout_6.addWidget(self.stackDec)
        self.grpDecryptionResult = QtWidgets.QGroupBox(self.tabDecrypt)
        self.grpDecryptionResult.setObjectName("grpDecryptionResult")
        self._4 = QtWidgets.QVBoxLayout(self.grpDecryptionResult)
        self._4.setContentsMargins(3, 3, 3, 3)
        self._4.setSpacing(3)
        self._4.setObjectName("_4")
        self.txtDecryptionResult = QtWidgets.QTextEdit(self.grpDecryptionResult)
        self.txtDecryptionResult.setEnabled(True)
        self.txtDecryptionResult.setUndoRedoEnabled(False)
        self.txtDecryptionResult.setReadOnly(True)
        self.txtDecryptionResult.setAcceptRichText(False)
        self.txtDecryptionResult.setObjectName("txtDecryptionResult")
        self._4.addWidget(self.txtDecryptionResult)
        self.verticalLayout_6.addWidget(self.grpDecryptionResult)
        self.tabWidget.addTab(self.tabDecrypt, "")
        self.verticalLayout_7.addWidget(self.tabWidget)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.trWhichFilesEnc = QtWidgets.QLabel(self.page_2)
        self.trWhichFilesEnc.setGeometry(QtCore.QRect(10, 10, 261, 17))
        self.trWhichFilesEnc.setObjectName("trWhichFilesEnc")
        self.trWhichFilesEncFileTypes = QtWidgets.QLabel(self.page_2)
        self.trWhichFilesEncFileTypes.setGeometry(QtCore.QRect(10, 30, 261, 17))
        self.trWhichFilesEncFileTypes.setObjectName("trWhichFilesEncFileTypes")
        self.trWhichFilesDecFileTypes = QtWidgets.QLabel(self.page_2)
        self.trWhichFilesDecFileTypes.setGeometry(QtCore.QRect(10, 90, 261, 17))
        self.trWhichFilesDecFileTypes.setObjectName("trWhichFilesDecFileTypes")
        self.trWhichFilesDec = QtWidgets.QLabel(self.page_2)
        self.trWhichFilesDec.setGeometry(QtCore.QRect(10, 60, 261, 17))
        self.trWhichFilesDec.setObjectName("trWhichFilesDec")
        self.trSuccessEnc = QtWidgets.QLabel(self.page_2)
        self.trSuccessEnc.setGeometry(QtCore.QRect(10, 310, 261, 17))
        self.trSuccessEnc.setObjectName("trSuccessEnc")
        self.trErrorNoEncFiles = QtWidgets.QLabel(self.page_2)
        self.trErrorNoEncFiles.setGeometry(QtCore.QRect(10, 150, 261, 17))
        self.trErrorNoEncFiles.setObjectName("trErrorNoEncFiles")
        self.trInfoLetsGo = QtWidgets.QLabel(self.page_2)
        self.trInfoLetsGo.setGeometry(QtCore.QRect(10, 180, 261, 17))
        self.trInfoLetsGo.setObjectName("trInfoLetsGo")
        self.trRetrievingANUData = QtWidgets.QLabel(self.page_2)
        self.trRetrievingANUData.setGeometry(QtCore.QRect(10, 210, 261, 17))
        self.trRetrievingANUData.setObjectName("trRetrievingANUData")
        self.trErrorTooBigForANU = QtWidgets.QLabel(self.page_2)
        self.trErrorTooBigForANU.setGeometry(QtCore.QRect(10, 240, 261, 17))
        self.trErrorTooBigForANU.setObjectName("trErrorTooBigForANU")
        self.trInfoStartingEnc = QtWidgets.QLabel(self.page_2)
        self.trInfoStartingEnc.setGeometry(QtCore.QRect(10, 270, 261, 17))
        self.trInfoStartingEnc.setObjectName("trInfoStartingEnc")
        self.trInfoAfterSuccess = QtWidgets.QLabel(self.page_2)
        self.trInfoAfterSuccess.setGeometry(QtCore.QRect(10, 340, 261, 17))
        self.trInfoAfterSuccess.setObjectName("trInfoAfterSuccess")
        self.trErrorEncMissingKeys = QtWidgets.QLabel(self.page_2)
        self.trErrorEncMissingKeys.setGeometry(QtCore.QRect(10, 370, 261, 17))
        self.trErrorEncMissingKeys.setObjectName("trErrorEncMissingKeys")
        self.trInfoDecryptExample = QtWidgets.QLabel(self.page_2)
        self.trInfoDecryptExample.setGeometry(QtCore.QRect(10, 400, 261, 17))
        self.trInfoDecryptExample.setObjectName("trInfoDecryptExample")
        self.trErrorNoDecFiles = QtWidgets.QLabel(self.page_2)
        self.trErrorNoDecFiles.setGeometry(QtCore.QRect(10, 440, 261, 17))
        self.trErrorNoDecFiles.setObjectName("trErrorNoDecFiles")
        self.trStartingDec = QtWidgets.QLabel(self.page_2)
        self.trStartingDec.setGeometry(QtCore.QRect(10, 470, 261, 17))
        self.trStartingDec.setObjectName("trStartingDec")
        self.trSuccessDec = QtWidgets.QLabel(self.page_2)
        self.trSuccessDec.setGeometry(QtCore.QRect(10, 490, 261, 17))
        self.trSuccessDec.setObjectName("trSuccessDec")
        self.trErrorANUNoConnection = QtWidgets.QLabel(self.page_2)
        self.trErrorANUNoConnection.setGeometry(QtCore.QRect(280, 150, 261, 17))
        self.trErrorANUNoConnection.setObjectName("trErrorANUNoConnection")
        self.trInfoANUSuccess = QtWidgets.QLabel(self.page_2)
        self.trInfoANUSuccess.setGeometry(QtCore.QRect(280, 170, 261, 17))
        self.trInfoANUSuccess.setObjectName("trInfoANUSuccess")
        self.trErrorANUTooMuchData = QtWidgets.QLabel(self.page_2)
        self.trErrorANUTooMuchData.setGeometry(QtCore.QRect(280, 190, 261, 17))
        self.trErrorANUTooMuchData.setObjectName("trErrorANUTooMuchData")
        self.trErrorANUUnknown = QtWidgets.QLabel(self.page_2)
        self.trErrorANUUnknown.setGeometry(QtCore.QRect(280, 210, 261, 17))
        self.trErrorANUUnknown.setObjectName("trErrorANUUnknown")
        self.stackedWidget.addWidget(self.page_2)
        self.verticalLayout.addWidget(self.stackedWidget)
        MainWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 506, 22))
        self.menuBar.setObjectName("menuBar")
        self.menuDatei = QtWidgets.QMenu(self.menuBar)
        self.menuDatei.setObjectName("menuDatei")
        self.menuHelp = QtWidgets.QMenu(self.menuBar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuLanguage = QtWidgets.QMenu(self.menuBar)
        self.menuLanguage.setObjectName("menuLanguage")
        MainWindow.setMenuBar(self.menuBar)
        self.actionOpenHelpFile = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/help.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpenHelpFile.setIcon(icon4)
        self.actionOpenHelpFile.setAutoRepeat(True)
        self.actionOpenHelpFile.setObjectName("actionOpenHelpFile")
        self.actionOpenOnlineHelp = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/globe_network.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpenOnlineHelp.setIcon(icon5)
        self.actionOpenOnlineHelp.setObjectName("actionOpenOnlineHelp")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/information.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbout.setIcon(icon6)
        self.actionAbout.setMenuRole(QtWidgets.QAction.AboutRole)
        self.actionAbout.setObjectName("actionAbout")
        self.actionClose = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/bomb.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClose.setIcon(icon7)
        self.actionClose.setMenuRole(QtWidgets.QAction.QuitRole)
        self.actionClose.setObjectName("actionClose")
        self.actionGerman = QtWidgets.QAction(MainWindow)
        self.actionGerman.setCheckable(True)
        self.actionGerman.setChecked(False)
        self.actionGerman.setAutoRepeat(False)
        self.actionGerman.setObjectName("actionGerman")
        self.actionEnglish = QtWidgets.QAction(MainWindow)
        self.actionEnglish.setCheckable(True)
        self.actionEnglish.setAutoRepeat(False)
        self.actionEnglish.setObjectName("actionEnglish")
        self.actionReportBug = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/icons/bug.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionReportBug.setIcon(icon8)
        self.actionReportBug.setObjectName("actionReportBug")
        self.menuDatei.addAction(self.actionClose)
        self.menuHelp.addAction(self.actionOpenHelpFile)
        self.menuHelp.addAction(self.actionOpenOnlineHelp)
        self.menuHelp.addAction(self.actionReportBug)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menuLanguage.addAction(self.actionGerman)
        self.menuLanguage.addAction(self.actionEnglish)
        self.menuBar.addAction(self.menuDatei.menuAction())
        self.menuBar.addAction(self.menuLanguage.menuAction())
        self.menuBar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)
        self.stackEnc.setCurrentIndex(0)
        self.stackDec.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Lokkat 0.5"))
        self.tabEncrypt.setToolTip(_translate("MainWindow", "<html><head/><body><p>Auf diesem Reiter kannst du Dateien verschlüsseln.</p></body></html>"))
        self.grpInputFilesEnc.setToolTip(_translate("MainWindow", "<html><head/><body><p>Hier kannst du die Dateien auswählen, die verschlüsselt werden sollen. Benutze hierzu die Schaltlfläche &quot;Dateien hinzufügen&quot;.</p></body></html>"))
        self.grpInputFilesEnc.setTitle(_translate("MainWindow", "1. \"Klartext\"-Dateien auswählen", "grpInputFilesEnc"))
        self.lsInputFilesEnc.setToolTip(_translate("MainWindow", "<html><head/><body><p>Hier kannst du die Dateien auswählen, die verschlüsselt werden sollen. Benutze hierzu die Schaltlfläche &quot;Dateien hinzufügen&quot;.</p></body></html>"))
        self.btnAddInputFilesEnc.setToolTip(_translate("MainWindow", "<html><head/><body><p>Füge mit dieser Schaltfläche Dateien hinzu die verschlüsselt werden sollen. Ein Klick auf sie öffnet ein Auswahlfenster. </p><p><span style=\" font-weight:600;\">Tipp: </span>Du kannst im Auswahlfenster auch mehrere Dateien auswählen und anschließend hinzufügen. Ziehe hierzu entweder einen Rahmen mit der linken Maustaste oder verwende die Tastenkombinationen Strg+Linksklick oder Umschalt+Linksklick auf die Dateien.</p></body></html>"))
        self.btnAddInputFilesEnc.setText(_translate("MainWindow", "Dateien hinzufügen", "btnAddInputFiles"))
        self.btnAddInputFilesEnc.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.btnRemoveInputFilesEnc.setToolTip(_translate("MainWindow", "<html><head/><body><p>Diese Schaltfläche erlaubt es dir, in der oberen Ansicht markierte Dateien wieder zu entfernen, damit sie <span style=\" font-weight:600;\">nicht</span> verschlüsselt werden.</p></body></html>"))
        self.btnRemoveInputFilesEnc.setText(_translate("MainWindow", "Ausgewählte entfernen", "btnRemoveInputFiles"))
        self.grpRandom.setToolTip(_translate("MainWindow", "<html><head/><body><p>Hier hast du die Auswahl zwischen zwei verschiedenen Quellen für die beim Verschlüsselungsvorgang genutzten Zufallszahlen.</p></body></html>"))
        self.grpRandom.setTitle(_translate("MainWindow", "2. Quelle für Zufallszahlen auswählen"))
        self.rbANU.setToolTip(_translate("MainWindow", "<html><head/><body><p>Wenn diese Option gewählt ist, dann wird die Internetseite &quot;http://qrng.anu.edu.au&quot; als Quelle für die beim Verschlüsselungsvorgang benötigten Zufallszahlen verwendet.</p><p>Die Australian National University verwendet Quantenfluktuation im Vakuum als Quelle für &quot;echten&quot; Zufall (meint: Zufall aus physikalischen Vorgängen).</p><p><span style=\" text-decoration: underline;\">Vorteile</span>:</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Physischer Zufall sorgt für erhöhte Sicherheit (da er schlichtweg nicht vorhersehbar oder nachträglich rekonstruierbar ist)</li></ul><p><span style=\" text-decoration: underline;\">Nachteile</span>:</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Internetverbindung wird benötigt</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Nur für geringe Datenmengen nutzbar, da wir die ANU nicht mit zu vielen Anfragen überfluten und ihre kostenlos bereitgestellte Serverleistung und Bandbreite übermäßig beanspruchen möchten</li></ul></body></html>"))
        self.rbANU.setText(_translate("MainWindow", "Physikalischer Zufall aus Quantenfluktuation (max. Gesamtdatengröße: 1MiB)", "rbRandomOrg"))
        self.rbCSPRNG.setToolTip(_translate("MainWindow", "<html><head/><body><p>Wenn diese Option gewählt ist, dann wird der systemeigene Pseudozufallsgenerator für kryptografische Zwecke (CSPRNG) verwendet. Je nach verwendetem Betriebssystem gibt es hier Unterschiede, aber in der Regel wird versucht, echten physischen Zufall zu nutzen, um einen Algorithmus zu füttern, der Pseudozufallszahlen ausgibt.</p><p><span style=\" text-decoration: underline;\">Vorteile</span>:</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Schneller als Zufallszahlen von der ANU, da keine Anfrage an einen Server gesendet werden muss</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Benötigt keine Internetverbindung</li><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Kein Limit für Dateigrößen, daher für große Dateien zu empfehlen</li></ul><p><span style=\" text-decoration: underline;\">Nachteile</span>:</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">ETWAS weniger Sicherheit als &quot;echter&quot; Zufall. Es besteht die Möglichkeit (sofern das benutzte System kompromittiert wurde), dass ein potenzieller Angreifer die Initialisierung des Pseudozufallsgenerators mitbekommt oder nachkonstruieren kann. Dieser Fall ist je nach System mehr oder weniger gefährlich für die tatsächliche Sicherheit des Gesamtschlüssels.</li></ul></body></html>"))
        self.rbCSPRNG.setText(_translate("MainWindow", "Systemeigener CSPRNG (Pseudozufallsgenerator)", "rbCSPRNG"))
        self.btnEncrypt.setToolTip(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Noto Sans\'; font-size:9pt; font-weight:600; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">Ein Klick auf diese Schaltfläche sorgt dafür, dass der Verschlüsselungsvorgang angestoßen wird.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">Je nach Erfolg oder Misserfolg wird das Ergebnis in der Textbox unter dieser Schaltfläche ausgegeben.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" text-decoration: underline;\">HINWEIS</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">Nach abgeschlossener Verschlüsselung werden die Klartext-Dateien </span>gelöscht<span style=\" font-weight:400;\">. An ihrer Stelle befinden sich nun zwei Arten von Dateien.:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">- </span><span style=\" font-weight:400; font-style:italic;\">crypt</span><span style=\" font-weight:400;\">-Datei: Dies ist die verschlüsselte Datei.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">- </span><span style=\" font-weight:400; font-style:italic;\">otp</span><span style=\" font-weight:400;\">-Datei: Dies ist der Schlüssel.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">Es ist wichtig, dass nach Abschluss des Verschlüsselungsvorgangs entweder die OTP-Dateien oder die CRYPT-Dateien ausgeschnitten und an einem anderen Speicherort (bspw. einem USB-Stick) eingefügt werden, damit sich verschlüsselte Dateien und ihre jeweligen Schlüssel </span>NICHT AUF DER GLEICHEN MASCHINE BEFINDEN<span style=\" font-weight:400;\">. </span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">Sonst besteht natürlich </span>keine<span style=\" font-weight:400;\"> Sicherheit, da ein Angreifer mit Zugriff auf den Rechner ja über die verschlüsselten Dateien UND die zugehörigen Schlüssel verfügen würde.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">Später müssen sie dann wieder zurück an den selben Speicherort kopiert werden, wenn eine Entschlüsselung erfolgen soll.</span></p></body></html>"))
        self.btnEncrypt.setText(_translate("MainWindow", "3. Verschlüsselung durchführen!", "btnEncrypt"))
        self.grpEncryptionResult.setToolTip(_translate("MainWindow", "<html><head/><body><p>Dieses Feld zeigt die Ausgabe des Verschlüsselungsvorgangs an. Fehler- oder Erfolgsmeldungen sind hier zu finden.</p></body></html>"))
        self.grpEncryptionResult.setTitle(_translate("MainWindow", "4. Ausgabe des Verschlüsselungsvorgangs", "grpEncryptionResult"))
        self.txtEncryptionResult.setToolTip(_translate("MainWindow", "<html><head/><body><p>Dieses Feld zeigt die Ausgabe des Verschlüsselungsvorgangs an. Fehler- oder Erfolgsmeldungen sind hier zu finden.</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabEncrypt), _translate("MainWindow", "Verschlüsselung", "tabEncrypt"))
        self.tabDecrypt.setToolTip(_translate("MainWindow", "<html><head/><body><p>Auf diesem Reiter kannst du Dateien entschlüsseln.</p></body></html>"))
        self.grpInputFilesDec.setToolTip(_translate("MainWindow", "<html><head/><body><p>Diese Dateien mit der Endung &quot;.crypt&quot; werden von Lokkat beim Verschlüsselungsvorgang erstellt. Sie sind sind die verschlüsselten Dateien. </p><p>Bitte darauf achten, dass sich zum Entschlüsselungsvorgang die &quot;.otp&quot;-Schlüsseldateien in den selben Verzeichnissen befinden, wie ihre &quot;.crypt&quot;-Dateien.</p></body></html>"))
        self.grpInputFilesDec.setTitle(_translate("MainWindow", "1. Zu entschlüsselnde Dateien (\".crypt\"-Dateien) auswählen", "grpInputFilesDec"))
        self.lsInputFilesDec.setToolTip(_translate("MainWindow", "<html><head/><body><p>Diese Dateien mit der Endung &quot;.crypt&quot; werden von Lokkat beim Verschlüsselungsvorgang erstellt. Sie sind sind die verschlüsselten Dateien. </p><p>Bitte darauf achten, dass sich zum Entschlüsselungsvorgang die &quot;.otp&quot;-Schlüsseldateien in den selben Verzeichnissen befinden, wie ihre &quot;.crypt&quot;-Dateien.</p></body></html>"))
        self.btnAddInputFilesDec.setToolTip(_translate("MainWindow", "<html><head/><body><p>Diese Schaltfläche kannst du benutzen, um Dateien, die entschlüsselt werden sollen, hinzuzufügen. Nach einem Klick öffnet sich ein Auswahlfenster, indem du die &quot;.crypt&quot;-Dateien auswählen kannst.</p><p><span style=\" font-weight:600;\">Tipp: </span>Du kannst im Auswahlfenster auch mehrere Dateien auswählen und anschließend hinzufügen. Ziehe hierzu entweder einen Rahmen mit der linken Maustaste oder verwende die Tastenkombinationen Strg+Linksklick oder Umschalt+Linksklick auf die Dateien.</p></body></html>"))
        self.btnAddInputFilesDec.setText(_translate("MainWindow", "Dateien hinzufügen", "grpAddInputFiles"))
        self.btnRemoveInputFilesDec.setToolTip(_translate("MainWindow", "<html><head/><body><p>Diese Schaltfläche erlaubt es dir, die oberhalb markierten &quot;.crypt&quot;-Dateien wieder zu entfernen, damit sie <span style=\" font-weight:600;\">nicht</span> entschlüsselt werden.</p></body></html>"))
        self.btnRemoveInputFilesDec.setText(_translate("MainWindow", "Ausgewählte entfernen", "grpRemoveInputFiles"))
        self.btnDecrypt.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:400;\">Startet den Entschlüsselungsvorgang.</span></p><p><span style=\" font-weight:400;\">Damit dieser erfolgreich sein kann, werden zwei Arten von Dateien benötigt:</span></p><ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">crypt-Dateien: Beinhalten das Kryptat, also die verschlüsselten Dateien.</span></li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:400;\">otp-Dateien: Beinhalten die Schlüssel.</span></li></ol><p><span style=\" font-weight:400;\">Es ist wichtig, dass die otp-Dateien in den selben Ordnern liegen, wie die jeweiligen crypt-Dateien.</span></p></body></html>"))
        self.btnDecrypt.setText(_translate("MainWindow", "2. Entschlüsselung durchführen!", "btnDecrypt"))
        self.grpDecryptionResult.setToolTip(_translate("MainWindow", "<html><head/><body><p>Hier werden die Ergebnisse des Entschlüsselungsvorgangs als Textmeldungen angezeigt.</p></body></html>"))
        self.grpDecryptionResult.setTitle(_translate("MainWindow", "3. Ausgabe des Entschlüsselungsvorgangs", "grpDecryptionResult"))
        self.txtDecryptionResult.setToolTip(_translate("MainWindow", "<html><head/><body><p>Hier werden die Ergebnisse des Entschlüsselungsvorgangs als Textmeldungen angezeigt.</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabDecrypt), _translate("MainWindow", "Entschlüsselung", "tabDecrypt"))
        self.trWhichFilesEnc.setText(_translate("MainWindow", "Welche Dateien sollen verschlüsselt werden?"))
        self.trWhichFilesEncFileTypes.setText(_translate("MainWindow", "Alle Dateien (*.*);; Wirklich ALLE Dateien (*)"))
        self.trWhichFilesDecFileTypes.setText(_translate("MainWindow", ".crypt-Dateien (*.crypt)"))
        self.trWhichFilesDec.setText(_translate("MainWindow", "Welche Dateien sollen entschlüsselt werden?"))
        self.trSuccessEnc.setText(_translate("MainWindow", "<div style=\"color:green;font-weight:bold;\">ERFOLG</div>: Verschlüsselung erfolgreich beendet! Du findest die verschlüsselten Dateien (Dateiendung: \".crpyt\") und die Schlüsseldateien (Dateiendung: \".otp\") dort, wo sich zuvor die Klartextdateien befanden."))
        self.trErrorNoEncFiles.setText(_translate("MainWindow", "<div style=\"color:red;font-weight:bold;\">FEHLER</div>: Keine Dateien zur Verschlüsselung ausgewählt ;-)"))
        self.trInfoLetsGo.setText(_translate("MainWindow", "<div style=\"color:#3A3A3A;font-weight:bold;\">INFO</div>: Los geht\'s."))
        self.trRetrievingANUData.setText(_translate("MainWindow", "<div style=\"color:#3A3A3A;font-weight:bold;\">INFO</div>: Besorge mir Quantenfluktuationszufallsdaten von der Australian National University. Das dauert (wenn es klappt) in der Regel so etwa 20-30 Sekunden...\n"
"Sollte es nicht klappen, lasse ich es nach 60 Sekunden bleiben."))
        self.trErrorTooBigForANU.setText(_translate("MainWindow", "<div style=\"color:red;font-weight:bold;\">FEHLER</div>: Deine Dateien sind insg. größer als 1 Megabyte. Probier\'s stattdessen mit dem CSPRNG. Der ist für große Datenmengen besser geeignet."))
        self.trInfoStartingEnc.setText(_translate("MainWindow", "<div style=\"color:#3A3A3A;font-weight:bold;\">INFO</div>: Beginne mit der Verschlüsselung der Dateien."))
        self.trInfoAfterSuccess.setText(_translate("MainWindow", "<div style=\"color:#3A3A3A;font-weight:bold;\">INFO</div>: Damit nicht IRGENDJEMAND deine Dateien entschlüsseln kann, musst du die Schlüsseldateien (*.otp) an einen anderen Speicherort verschieben, der sich am besten nicht ungesichert auf diesem Computer befindet; einen USB-Stick zum Beispiel, den du an einem gesicherten Ort aufbewahren kannst."))
        self.trErrorEncMissingKeys.setText(_translate("MainWindow", "<div style=\"color:red;font-weight:bold;\">FEHLER</div>: Nicht alle Schlüssel befinden sich in den Verzeichnissen ihrer zugehörigen verschlüsselten Dateien. Es fehlen:"))
        self.trInfoDecryptExample.setText(_translate("MainWindow", "<div style=\"color:#3A3A3A;font-weight:bold;\">INFO</div>: Um eine crypt-Datei wieder zu entschlüsseln, muss sich im gleichen Ordner eine passende otp-Datei befinden. Beispiel: \'Geheim.txt.crypt\' ist die verschlüsselte Datei. Im gleichen Ordner muss sich die Datei \'Geheim.txt.otp\' befinden. Diese ist der Schlüssel. Anschließend kann die Entschlüsselung erfolgen und heraus kommt: \'Geheim.txt\' - die ursprünglich verschlüsselte Datei wieder im Klartext."))
        self.trErrorNoDecFiles.setText(_translate("MainWindow", "<div style=\"color:red;font-weight:bold;\">FEHLER</div>: Keine Dateien zur Entschlüsselung ausgewählt ;-)"))
        self.trStartingDec.setText(_translate("MainWindow", "<div style=\"color:#3A3A3A;font-weight:bold;\">INFO</div>: Beginne mit der Entschlüsselung der Dateien."))
        self.trSuccessDec.setText(_translate("MainWindow", "<div style=\"color:green;font-weight:bold;\">ERFOLG</div>: Die Dateien wurden erfolgreich wieder entschlüsselt! Sie befinden sich dort, wo sich zuvor die crypt-Dateien befanden."))
        self.trErrorANUNoConnection.setText(_translate("MainWindow", "<div style=\"color:red;font-weight:bold;\">FEHLER</div>: Konnte keine Quantenzufallsdaten von den Servern der Australian National University anfordern. Probier\' es später noch einmal oder wähle den CSPRNG als Zufallsdatenquelle aus. Der ist nicht auf externe Server angewiesen und bietet ebenfalls nahezu perfekte Sicherheit für die OTP-Verschlüsselung."))
        self.trInfoANUSuccess.setText(_translate("MainWindow", "<div style=\"color:#3A3A3A;font-weight:bold;\">INFO</div>: Quantenfluktuationszufallsdaten von der Australian National University erhalten! Abfragedauer: {} Sekunden."))
        self.trErrorANUTooMuchData.setText(_translate("MainWindow", "<div style=\"color:red;font-weight:bold;\">FEHLER</div>: Die angeforderte Datenmenge übersteigt 1MiB. Benutze einfach den CSPRNG für große Datenmengen."))
        self.trErrorANUUnknown.setText(_translate("MainWindow", "<div style=\"color:red;font-weight:bold;\">FEHLER</div>: Unbekannter Fehler bei der Anfrage der Zufallsdaten von der ANU."))
        self.menuDatei.setTitle(_translate("MainWindow", "Datei", "menuFile"))
        self.menuHelp.setTitle(_translate("MainWindow", "Hilfe", "menuHelp"))
        self.menuLanguage.setTitle(_translate("MainWindow", "Sprache/Language"))
        self.actionOpenHelpFile.setText(_translate("MainWindow", "Hilfedatei öffnen"))
        self.actionOpenHelpFile.setShortcut(_translate("MainWindow", "F1", "actionOpenHelpFile"))
        self.actionOpenOnlineHelp.setText(_translate("MainWindow", "Projektwebseite aufrufen"))
        self.actionOpenOnlineHelp.setShortcut(_translate("MainWindow", "F3"))
        self.actionAbout.setText(_translate("MainWindow", "Über Lokkat..."))
        self.actionAbout.setShortcut(_translate("MainWindow", "F12"))
        self.actionClose.setText(_translate("MainWindow", "Schließen"))
        self.actionClose.setToolTip(_translate("MainWindow", "<html><head/><body><p>Schließt Lokkat.</p></body></html>"))
        self.actionClose.setShortcut(_translate("MainWindow", "Ctrl+Q", "actionClose"))
        self.actionGerman.setText(_translate("MainWindow", "Deutsch"))
        self.actionEnglish.setText(_translate("MainWindow", "Englisch"))
        self.actionReportBug.setText(_translate("MainWindow", "Programmfehler melden"))
from gui import resources_rc
